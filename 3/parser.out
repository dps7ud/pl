Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> classlist
Rule 2     classlist -> class SEMI
Rule 3     classlist -> class SEMI classlist
Rule 4     class -> CLASS type LBRACE featurelist RBRACE
Rule 5     class -> CLASS type INHERITS type LBRACE featurelist RBRACE
Rule 6     featurelist -> <empty>
Rule 7     featurelist -> feature SEMI featurelist
Rule 8     feature -> identifier COLON type
Rule 9     feature -> identifier COLON type LARROW expr
Rule 10    feature -> identifier LPAREN formallist RPAREN COLON type LBRACE expr RBRACE
Rule 11    feature -> identifier LPAREN RPAREN COLON type LBRACE expr RBRACE
Rule 12    formallist -> formal
Rule 13    formallist -> formal COMMA formallist
Rule 14    formal -> identifier COLON type
Rule 15    type -> TYPE
Rule 16    identifier -> IDENTIFIER
Rule 17    expr -> identifier LARROW expr
Rule 18    expr -> expr DOT identifier LPAREN arglist RPAREN
Rule 19    expr -> expr AT type DOT identifier LPAREN arglist RPAREN
Rule 20    expr -> identifier LPAREN arglist RPAREN
Rule 21    exprlist -> expr SEMI
Rule 22    exprlist -> expr SEMI exprlist
Rule 23    B -> COMMA expr B
Rule 24    B -> <empty>
Rule 25    arglist -> expr B
Rule 26    arglist -> <empty>
Rule 27    expr -> IF expr THEN expr ELSE expr FI
Rule 28    expr -> WHILE expr LOOP expr POOL
Rule 29    expr -> LBRACE exprlist RBRACE
Rule 30    expr -> NEW type
Rule 31    expr -> ISVOID expr
Rule 32    expr -> expr PLUS expr
Rule 33    expr -> expr MINUS expr
Rule 34    expr -> expr TIMES expr
Rule 35    expr -> expr DIVIDE expr
Rule 36    expr -> TILDE expr
Rule 37    expr -> expr LT expr
Rule 38    expr -> expr LE expr
Rule 39    expr -> expr EQUALS expr
Rule 40    expr -> NOT expr
Rule 41    expr -> LPAREN expr RPAREN
Rule 42    expr -> identifier
Rule 43    expr -> INTEGER
Rule 44    expr -> STRING
Rule 45    expr -> TRUE
Rule 46    expr -> FALSE
Rule 47    expr -> LET bindinglist IN expr
Rule 48    bindinglist -> binding
Rule 49    bindinglist -> binding COMMA bindinglist
Rule 50    binding -> identifier COLON type
Rule 51    binding -> identifier COLON type LARROW expr
Rule 52    expr -> CASE expr OF caselist ESAC
Rule 53    caselist -> case SEMI
Rule 54    caselist -> case SEMI caselist
Rule 55    case -> identifier COLON type RARROW expr

Terminals, with rules where they appear

AT                   : 19
CASE                 : 52
CLASS                : 4 5
COLON                : 8 9 10 11 14 50 51 55
COMMA                : 13 23 49
DIVIDE               : 35
DOT                  : 18 19
ELSE                 : 27
EQUALS               : 39
ESAC                 : 52
FALSE                : 46
FI                   : 27
IDENTIFIER           : 16
IF                   : 27
IN                   : 47
INHERITS             : 5
INTEGER              : 43
ISVOID               : 31
LARROW               : 9 17 51
LBRACE               : 4 5 10 11 29
LE                   : 38
LET                  : 47
LOOP                 : 28
LPAREN               : 10 11 18 19 20 41
LT                   : 37
MINUS                : 33
NEW                  : 30
NOT                  : 40
OF                   : 52
PLUS                 : 32
POOL                 : 28
RARROW               : 55
RBRACE               : 4 5 10 11 29
RPAREN               : 10 11 18 19 20 41
SEMI                 : 2 3 7 21 22 53 54
STRING               : 44
THEN                 : 27
TILDE                : 36
TIMES                : 34
TRUE                 : 45
TYPE                 : 15
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

B                    : 23 25
arglist              : 18 19 20
binding              : 48 49
bindinglist          : 47 49
case                 : 53 54
caselist             : 52 54
class                : 2 3
classlist            : 1 3
expr                 : 9 10 11 17 18 19 21 22 23 25 27 27 27 28 28 31 32 32 33 33 34 34 35 35 36 37 37 38 38 39 39 40 41 47 51 52 55
exprlist             : 22 29
feature              : 7
featurelist          : 4 5 7
formal               : 12 13
formallist           : 10 13
identifier           : 8 9 10 11 14 17 18 19 20 42 50 51 55
program              : 0
type                 : 4 5 5 8 9 10 11 14 19 30 50 51 55

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . classlist
    (2) classlist -> . class SEMI
    (3) classlist -> . class SEMI classlist
    (4) class -> . CLASS type LBRACE featurelist RBRACE
    (5) class -> . CLASS type INHERITS type LBRACE featurelist RBRACE

    CLASS           shift and go to state 2

    classlist                      shift and go to state 1
    program                        shift and go to state 3
    class                          shift and go to state 4

state 1

    (1) program -> classlist .

    $end            reduce using rule 1 (program -> classlist .)


state 2

    (4) class -> CLASS . type LBRACE featurelist RBRACE
    (5) class -> CLASS . type INHERITS type LBRACE featurelist RBRACE
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 6

state 3

    (0) S' -> program .



state 4

    (2) classlist -> class . SEMI
    (3) classlist -> class . SEMI classlist

    SEMI            shift and go to state 7


state 5

    (15) type -> TYPE .

    RARROW          reduce using rule 15 (type -> TYPE .)
    LARROW          reduce using rule 15 (type -> TYPE .)
    COMMA           reduce using rule 15 (type -> TYPE .)
    IN              reduce using rule 15 (type -> TYPE .)
    DOT             reduce using rule 15 (type -> TYPE .)
    AT              reduce using rule 15 (type -> TYPE .)
    PLUS            reduce using rule 15 (type -> TYPE .)
    MINUS           reduce using rule 15 (type -> TYPE .)
    TIMES           reduce using rule 15 (type -> TYPE .)
    DIVIDE          reduce using rule 15 (type -> TYPE .)
    LT              reduce using rule 15 (type -> TYPE .)
    LE              reduce using rule 15 (type -> TYPE .)
    EQUALS          reduce using rule 15 (type -> TYPE .)
    SEMI            reduce using rule 15 (type -> TYPE .)
    LOOP            reduce using rule 15 (type -> TYPE .)
    OF              reduce using rule 15 (type -> TYPE .)
    RPAREN          reduce using rule 15 (type -> TYPE .)
    THEN            reduce using rule 15 (type -> TYPE .)
    RBRACE          reduce using rule 15 (type -> TYPE .)
    POOL            reduce using rule 15 (type -> TYPE .)
    ELSE            reduce using rule 15 (type -> TYPE .)
    FI              reduce using rule 15 (type -> TYPE .)
    LBRACE          reduce using rule 15 (type -> TYPE .)
    INHERITS        reduce using rule 15 (type -> TYPE .)


state 6

    (4) class -> CLASS type . LBRACE featurelist RBRACE
    (5) class -> CLASS type . INHERITS type LBRACE featurelist RBRACE

    LBRACE          shift and go to state 9
    INHERITS        shift and go to state 8


state 7

    (2) classlist -> class SEMI .
    (3) classlist -> class SEMI . classlist
    (2) classlist -> . class SEMI
    (3) classlist -> . class SEMI classlist
    (4) class -> . CLASS type LBRACE featurelist RBRACE
    (5) class -> . CLASS type INHERITS type LBRACE featurelist RBRACE

    $end            reduce using rule 2 (classlist -> class SEMI .)
    CLASS           shift and go to state 2

    classlist                      shift and go to state 10
    class                          shift and go to state 4

state 8

    (5) class -> CLASS type INHERITS . type LBRACE featurelist RBRACE
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 11

state 9

    (4) class -> CLASS type LBRACE . featurelist RBRACE
    (6) featurelist -> .
    (7) featurelist -> . feature SEMI featurelist
    (8) feature -> . identifier COLON type
    (9) feature -> . identifier COLON type LARROW expr
    (10) feature -> . identifier LPAREN formallist RPAREN COLON type LBRACE expr RBRACE
    (11) feature -> . identifier LPAREN RPAREN COLON type LBRACE expr RBRACE
    (16) identifier -> . IDENTIFIER

    RBRACE          reduce using rule 6 (featurelist -> .)
    IDENTIFIER      shift and go to state 14

    feature                        shift and go to state 12
    featurelist                    shift and go to state 13
    identifier                     shift and go to state 15

state 10

    (3) classlist -> class SEMI classlist .

    $end            reduce using rule 3 (classlist -> class SEMI classlist .)


state 11

    (5) class -> CLASS type INHERITS type . LBRACE featurelist RBRACE

    LBRACE          shift and go to state 16


state 12

    (7) featurelist -> feature . SEMI featurelist

    SEMI            shift and go to state 17


state 13

    (4) class -> CLASS type LBRACE featurelist . RBRACE

    RBRACE          shift and go to state 18


state 14

    (16) identifier -> IDENTIFIER .

    LARROW          reduce using rule 16 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 16 (identifier -> IDENTIFIER .)
    DOT             reduce using rule 16 (identifier -> IDENTIFIER .)
    AT              reduce using rule 16 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 16 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 16 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 16 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 16 (identifier -> IDENTIFIER .)
    LT              reduce using rule 16 (identifier -> IDENTIFIER .)
    LE              reduce using rule 16 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 16 (identifier -> IDENTIFIER .)
    SEMI            reduce using rule 16 (identifier -> IDENTIFIER .)
    LOOP            reduce using rule 16 (identifier -> IDENTIFIER .)
    OF              reduce using rule 16 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 16 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 16 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 16 (identifier -> IDENTIFIER .)
    RBRACE          reduce using rule 16 (identifier -> IDENTIFIER .)
    POOL            reduce using rule 16 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 16 (identifier -> IDENTIFIER .)
    FI              reduce using rule 16 (identifier -> IDENTIFIER .)
    IN              reduce using rule 16 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 16 (identifier -> IDENTIFIER .)


state 15

    (8) feature -> identifier . COLON type
    (9) feature -> identifier . COLON type LARROW expr
    (10) feature -> identifier . LPAREN formallist RPAREN COLON type LBRACE expr RBRACE
    (11) feature -> identifier . LPAREN RPAREN COLON type LBRACE expr RBRACE

    COLON           shift and go to state 19
    LPAREN          shift and go to state 20


state 16

    (5) class -> CLASS type INHERITS type LBRACE . featurelist RBRACE
    (6) featurelist -> .
    (7) featurelist -> . feature SEMI featurelist
    (8) feature -> . identifier COLON type
    (9) feature -> . identifier COLON type LARROW expr
    (10) feature -> . identifier LPAREN formallist RPAREN COLON type LBRACE expr RBRACE
    (11) feature -> . identifier LPAREN RPAREN COLON type LBRACE expr RBRACE
    (16) identifier -> . IDENTIFIER

    RBRACE          reduce using rule 6 (featurelist -> .)
    IDENTIFIER      shift and go to state 14

    feature                        shift and go to state 12
    featurelist                    shift and go to state 21
    identifier                     shift and go to state 15

state 17

    (7) featurelist -> feature SEMI . featurelist
    (6) featurelist -> .
    (7) featurelist -> . feature SEMI featurelist
    (8) feature -> . identifier COLON type
    (9) feature -> . identifier COLON type LARROW expr
    (10) feature -> . identifier LPAREN formallist RPAREN COLON type LBRACE expr RBRACE
    (11) feature -> . identifier LPAREN RPAREN COLON type LBRACE expr RBRACE
    (16) identifier -> . IDENTIFIER

    RBRACE          reduce using rule 6 (featurelist -> .)
    IDENTIFIER      shift and go to state 14

    feature                        shift and go to state 12
    featurelist                    shift and go to state 22
    identifier                     shift and go to state 15

state 18

    (4) class -> CLASS type LBRACE featurelist RBRACE .

    SEMI            reduce using rule 4 (class -> CLASS type LBRACE featurelist RBRACE .)


state 19

    (8) feature -> identifier COLON . type
    (9) feature -> identifier COLON . type LARROW expr
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 23

state 20

    (10) feature -> identifier LPAREN . formallist RPAREN COLON type LBRACE expr RBRACE
    (11) feature -> identifier LPAREN . RPAREN COLON type LBRACE expr RBRACE
    (12) formallist -> . formal
    (13) formallist -> . formal COMMA formallist
    (14) formal -> . identifier COLON type
    (16) identifier -> . IDENTIFIER

    RPAREN          shift and go to state 24
    IDENTIFIER      shift and go to state 14

    formal                         shift and go to state 27
    identifier                     shift and go to state 26
    formallist                     shift and go to state 25

state 21

    (5) class -> CLASS type INHERITS type LBRACE featurelist . RBRACE

    RBRACE          shift and go to state 28


state 22

    (7) featurelist -> feature SEMI featurelist .

    RBRACE          reduce using rule 7 (featurelist -> feature SEMI featurelist .)


state 23

    (8) feature -> identifier COLON type .
    (9) feature -> identifier COLON type . LARROW expr

    SEMI            reduce using rule 8 (feature -> identifier COLON type .)
    LARROW          shift and go to state 29


state 24

    (11) feature -> identifier LPAREN RPAREN . COLON type LBRACE expr RBRACE

    COLON           shift and go to state 30


state 25

    (10) feature -> identifier LPAREN formallist . RPAREN COLON type LBRACE expr RBRACE

    RPAREN          shift and go to state 31


state 26

    (14) formal -> identifier . COLON type

    COLON           shift and go to state 32


state 27

    (12) formallist -> formal .
    (13) formallist -> formal . COMMA formallist

    RPAREN          reduce using rule 12 (formallist -> formal .)
    COMMA           shift and go to state 33


state 28

    (5) class -> CLASS type INHERITS type LBRACE featurelist RBRACE .

    SEMI            reduce using rule 5 (class -> CLASS type INHERITS type LBRACE featurelist RBRACE .)


state 29

    (9) feature -> identifier COLON type LARROW . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 49
    expr                           shift and go to state 46

state 30

    (11) feature -> identifier LPAREN RPAREN COLON . type LBRACE expr RBRACE
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 50

state 31

    (10) feature -> identifier LPAREN formallist RPAREN . COLON type LBRACE expr RBRACE

    COLON           shift and go to state 51


state 32

    (14) formal -> identifier COLON . type
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 52

state 33

    (13) formallist -> formal COMMA . formallist
    (12) formallist -> . formal
    (13) formallist -> . formal COMMA formallist
    (14) formal -> . identifier COLON type
    (16) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    formallist                     shift and go to state 53
    identifier                     shift and go to state 26
    formal                         shift and go to state 27

state 34

    (28) expr -> WHILE . expr LOOP expr POOL
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 54
    identifier                     shift and go to state 49

state 35

    (30) expr -> NEW . type
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 55

state 36

    (45) expr -> TRUE .

    OF              reduce using rule 45 (expr -> TRUE .)
    DOT             reduce using rule 45 (expr -> TRUE .)
    AT              reduce using rule 45 (expr -> TRUE .)
    PLUS            reduce using rule 45 (expr -> TRUE .)
    MINUS           reduce using rule 45 (expr -> TRUE .)
    TIMES           reduce using rule 45 (expr -> TRUE .)
    DIVIDE          reduce using rule 45 (expr -> TRUE .)
    LT              reduce using rule 45 (expr -> TRUE .)
    LE              reduce using rule 45 (expr -> TRUE .)
    EQUALS          reduce using rule 45 (expr -> TRUE .)
    FI              reduce using rule 45 (expr -> TRUE .)
    RPAREN          reduce using rule 45 (expr -> TRUE .)
    SEMI            reduce using rule 45 (expr -> TRUE .)
    LOOP            reduce using rule 45 (expr -> TRUE .)
    THEN            reduce using rule 45 (expr -> TRUE .)
    COMMA           reduce using rule 45 (expr -> TRUE .)
    RBRACE          reduce using rule 45 (expr -> TRUE .)
    POOL            reduce using rule 45 (expr -> TRUE .)
    ELSE            reduce using rule 45 (expr -> TRUE .)
    IN              reduce using rule 45 (expr -> TRUE .)


state 37

    (52) expr -> CASE . expr OF caselist ESAC
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 49
    expr                           shift and go to state 56

state 38

    (31) expr -> ISVOID . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 57
    identifier                     shift and go to state 49

state 39

    (36) expr -> TILDE . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 58
    identifier                     shift and go to state 49

state 40

    (44) expr -> STRING .

    OF              reduce using rule 44 (expr -> STRING .)
    DOT             reduce using rule 44 (expr -> STRING .)
    AT              reduce using rule 44 (expr -> STRING .)
    PLUS            reduce using rule 44 (expr -> STRING .)
    MINUS           reduce using rule 44 (expr -> STRING .)
    TIMES           reduce using rule 44 (expr -> STRING .)
    DIVIDE          reduce using rule 44 (expr -> STRING .)
    LT              reduce using rule 44 (expr -> STRING .)
    LE              reduce using rule 44 (expr -> STRING .)
    EQUALS          reduce using rule 44 (expr -> STRING .)
    FI              reduce using rule 44 (expr -> STRING .)
    RPAREN          reduce using rule 44 (expr -> STRING .)
    SEMI            reduce using rule 44 (expr -> STRING .)
    LOOP            reduce using rule 44 (expr -> STRING .)
    THEN            reduce using rule 44 (expr -> STRING .)
    COMMA           reduce using rule 44 (expr -> STRING .)
    RBRACE          reduce using rule 44 (expr -> STRING .)
    POOL            reduce using rule 44 (expr -> STRING .)
    ELSE            reduce using rule 44 (expr -> STRING .)
    IN              reduce using rule 44 (expr -> STRING .)


state 41

    (41) expr -> LPAREN . expr RPAREN
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 59
    identifier                     shift and go to state 49

state 42

    (43) expr -> INTEGER .

    OF              reduce using rule 43 (expr -> INTEGER .)
    DOT             reduce using rule 43 (expr -> INTEGER .)
    AT              reduce using rule 43 (expr -> INTEGER .)
    PLUS            reduce using rule 43 (expr -> INTEGER .)
    MINUS           reduce using rule 43 (expr -> INTEGER .)
    TIMES           reduce using rule 43 (expr -> INTEGER .)
    DIVIDE          reduce using rule 43 (expr -> INTEGER .)
    LT              reduce using rule 43 (expr -> INTEGER .)
    LE              reduce using rule 43 (expr -> INTEGER .)
    EQUALS          reduce using rule 43 (expr -> INTEGER .)
    FI              reduce using rule 43 (expr -> INTEGER .)
    RPAREN          reduce using rule 43 (expr -> INTEGER .)
    SEMI            reduce using rule 43 (expr -> INTEGER .)
    LOOP            reduce using rule 43 (expr -> INTEGER .)
    THEN            reduce using rule 43 (expr -> INTEGER .)
    COMMA           reduce using rule 43 (expr -> INTEGER .)
    RBRACE          reduce using rule 43 (expr -> INTEGER .)
    POOL            reduce using rule 43 (expr -> INTEGER .)
    ELSE            reduce using rule 43 (expr -> INTEGER .)
    IN              reduce using rule 43 (expr -> INTEGER .)


state 43

    (27) expr -> IF . expr THEN expr ELSE expr FI
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 60
    identifier                     shift and go to state 49

state 44

    (29) expr -> LBRACE . exprlist RBRACE
    (21) exprlist -> . expr SEMI
    (22) exprlist -> . expr SEMI exprlist
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 62
    identifier                     shift and go to state 49
    exprlist                       shift and go to state 61

state 45

    (46) expr -> FALSE .

    OF              reduce using rule 46 (expr -> FALSE .)
    DOT             reduce using rule 46 (expr -> FALSE .)
    AT              reduce using rule 46 (expr -> FALSE .)
    PLUS            reduce using rule 46 (expr -> FALSE .)
    MINUS           reduce using rule 46 (expr -> FALSE .)
    TIMES           reduce using rule 46 (expr -> FALSE .)
    DIVIDE          reduce using rule 46 (expr -> FALSE .)
    LT              reduce using rule 46 (expr -> FALSE .)
    LE              reduce using rule 46 (expr -> FALSE .)
    EQUALS          reduce using rule 46 (expr -> FALSE .)
    FI              reduce using rule 46 (expr -> FALSE .)
    RPAREN          reduce using rule 46 (expr -> FALSE .)
    SEMI            reduce using rule 46 (expr -> FALSE .)
    LOOP            reduce using rule 46 (expr -> FALSE .)
    THEN            reduce using rule 46 (expr -> FALSE .)
    COMMA           reduce using rule 46 (expr -> FALSE .)
    RBRACE          reduce using rule 46 (expr -> FALSE .)
    POOL            reduce using rule 46 (expr -> FALSE .)
    ELSE            reduce using rule 46 (expr -> FALSE .)
    IN              reduce using rule 46 (expr -> FALSE .)


state 46

    (9) feature -> identifier COLON type LARROW expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    SEMI            reduce using rule 9 (feature -> identifier COLON type LARROW expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 47

    (47) expr -> LET . bindinglist IN expr
    (48) bindinglist -> . binding
    (49) bindinglist -> . binding COMMA bindinglist
    (50) binding -> . identifier COLON type
    (51) binding -> . identifier COLON type LARROW expr
    (16) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    binding                        shift and go to state 72
    identifier                     shift and go to state 74
    bindinglist                    shift and go to state 73

state 48

    (40) expr -> NOT . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 75
    identifier                     shift and go to state 49

state 49

    (17) expr -> identifier . LARROW expr
    (20) expr -> identifier . LPAREN arglist RPAREN
    (42) expr -> identifier .

    LARROW          shift and go to state 76
    LPAREN          shift and go to state 77
    OF              reduce using rule 42 (expr -> identifier .)
    DOT             reduce using rule 42 (expr -> identifier .)
    AT              reduce using rule 42 (expr -> identifier .)
    PLUS            reduce using rule 42 (expr -> identifier .)
    MINUS           reduce using rule 42 (expr -> identifier .)
    TIMES           reduce using rule 42 (expr -> identifier .)
    DIVIDE          reduce using rule 42 (expr -> identifier .)
    LT              reduce using rule 42 (expr -> identifier .)
    LE              reduce using rule 42 (expr -> identifier .)
    EQUALS          reduce using rule 42 (expr -> identifier .)
    FI              reduce using rule 42 (expr -> identifier .)
    RPAREN          reduce using rule 42 (expr -> identifier .)
    SEMI            reduce using rule 42 (expr -> identifier .)
    LOOP            reduce using rule 42 (expr -> identifier .)
    THEN            reduce using rule 42 (expr -> identifier .)
    COMMA           reduce using rule 42 (expr -> identifier .)
    RBRACE          reduce using rule 42 (expr -> identifier .)
    POOL            reduce using rule 42 (expr -> identifier .)
    ELSE            reduce using rule 42 (expr -> identifier .)
    IN              reduce using rule 42 (expr -> identifier .)


state 50

    (11) feature -> identifier LPAREN RPAREN COLON type . LBRACE expr RBRACE

    LBRACE          shift and go to state 78


state 51

    (10) feature -> identifier LPAREN formallist RPAREN COLON . type LBRACE expr RBRACE
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 79

state 52

    (14) formal -> identifier COLON type .

    COMMA           reduce using rule 14 (formal -> identifier COLON type .)
    RPAREN          reduce using rule 14 (formal -> identifier COLON type .)


state 53

    (13) formallist -> formal COMMA formallist .

    RPAREN          reduce using rule 13 (formallist -> formal COMMA formallist .)


state 54

    (28) expr -> WHILE expr . LOOP expr POOL
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    LOOP            shift and go to state 80
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 55

    (30) expr -> NEW type .

    OF              reduce using rule 30 (expr -> NEW type .)
    DOT             reduce using rule 30 (expr -> NEW type .)
    AT              reduce using rule 30 (expr -> NEW type .)
    PLUS            reduce using rule 30 (expr -> NEW type .)
    MINUS           reduce using rule 30 (expr -> NEW type .)
    TIMES           reduce using rule 30 (expr -> NEW type .)
    DIVIDE          reduce using rule 30 (expr -> NEW type .)
    LT              reduce using rule 30 (expr -> NEW type .)
    LE              reduce using rule 30 (expr -> NEW type .)
    EQUALS          reduce using rule 30 (expr -> NEW type .)
    FI              reduce using rule 30 (expr -> NEW type .)
    RPAREN          reduce using rule 30 (expr -> NEW type .)
    SEMI            reduce using rule 30 (expr -> NEW type .)
    LOOP            reduce using rule 30 (expr -> NEW type .)
    THEN            reduce using rule 30 (expr -> NEW type .)
    COMMA           reduce using rule 30 (expr -> NEW type .)
    RBRACE          reduce using rule 30 (expr -> NEW type .)
    POOL            reduce using rule 30 (expr -> NEW type .)
    ELSE            reduce using rule 30 (expr -> NEW type .)
    IN              reduce using rule 30 (expr -> NEW type .)


state 56

    (52) expr -> CASE expr . OF caselist ESAC
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              shift and go to state 81
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 57

    (31) expr -> ISVOID expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 31 (expr -> ISVOID expr .)
    PLUS            reduce using rule 31 (expr -> ISVOID expr .)
    MINUS           reduce using rule 31 (expr -> ISVOID expr .)
    TIMES           reduce using rule 31 (expr -> ISVOID expr .)
    DIVIDE          reduce using rule 31 (expr -> ISVOID expr .)
    LT              reduce using rule 31 (expr -> ISVOID expr .)
    LE              reduce using rule 31 (expr -> ISVOID expr .)
    EQUALS          reduce using rule 31 (expr -> ISVOID expr .)
    FI              reduce using rule 31 (expr -> ISVOID expr .)
    RPAREN          reduce using rule 31 (expr -> ISVOID expr .)
    SEMI            reduce using rule 31 (expr -> ISVOID expr .)
    LOOP            reduce using rule 31 (expr -> ISVOID expr .)
    THEN            reduce using rule 31 (expr -> ISVOID expr .)
    COMMA           reduce using rule 31 (expr -> ISVOID expr .)
    RBRACE          reduce using rule 31 (expr -> ISVOID expr .)
    POOL            reduce using rule 31 (expr -> ISVOID expr .)
    ELSE            reduce using rule 31 (expr -> ISVOID expr .)
    IN              reduce using rule 31 (expr -> ISVOID expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68

  ! DOT             [ reduce using rule 31 (expr -> ISVOID expr .) ]
  ! AT              [ reduce using rule 31 (expr -> ISVOID expr .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! TIMES           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! EQUALS          [ shift and go to state 64 ]


state 58

    (36) expr -> TILDE expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 36 (expr -> TILDE expr .)
    PLUS            reduce using rule 36 (expr -> TILDE expr .)
    MINUS           reduce using rule 36 (expr -> TILDE expr .)
    TIMES           reduce using rule 36 (expr -> TILDE expr .)
    DIVIDE          reduce using rule 36 (expr -> TILDE expr .)
    LT              reduce using rule 36 (expr -> TILDE expr .)
    LE              reduce using rule 36 (expr -> TILDE expr .)
    EQUALS          reduce using rule 36 (expr -> TILDE expr .)
    FI              reduce using rule 36 (expr -> TILDE expr .)
    RPAREN          reduce using rule 36 (expr -> TILDE expr .)
    SEMI            reduce using rule 36 (expr -> TILDE expr .)
    LOOP            reduce using rule 36 (expr -> TILDE expr .)
    THEN            reduce using rule 36 (expr -> TILDE expr .)
    COMMA           reduce using rule 36 (expr -> TILDE expr .)
    RBRACE          reduce using rule 36 (expr -> TILDE expr .)
    POOL            reduce using rule 36 (expr -> TILDE expr .)
    ELSE            reduce using rule 36 (expr -> TILDE expr .)
    IN              reduce using rule 36 (expr -> TILDE expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68

  ! DOT             [ reduce using rule 36 (expr -> TILDE expr .) ]
  ! AT              [ reduce using rule 36 (expr -> TILDE expr .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! TIMES           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! EQUALS          [ shift and go to state 64 ]


state 59

    (41) expr -> LPAREN expr . RPAREN
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    RPAREN          shift and go to state 82
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 60

    (27) expr -> IF expr . THEN expr ELSE expr FI
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    THEN            shift and go to state 83
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 61

    (29) expr -> LBRACE exprlist . RBRACE

    RBRACE          shift and go to state 84


state 62

    (21) exprlist -> expr . SEMI
    (22) exprlist -> expr . SEMI exprlist
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    SEMI            shift and go to state 85
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 63

    (35) expr -> expr DIVIDE . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 86
    identifier                     shift and go to state 49

state 64

    (39) expr -> expr EQUALS . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 87
    identifier                     shift and go to state 49

state 65

    (34) expr -> expr TIMES . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 88
    identifier                     shift and go to state 49

state 66

    (37) expr -> expr LT . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 89
    identifier                     shift and go to state 49

state 67

    (38) expr -> expr LE . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 90
    identifier                     shift and go to state 49

state 68

    (19) expr -> expr AT . type DOT identifier LPAREN arglist RPAREN
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 91

state 69

    (32) expr -> expr PLUS . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 92
    identifier                     shift and go to state 49

state 70

    (33) expr -> expr MINUS . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 93
    identifier                     shift and go to state 49

state 71

    (18) expr -> expr DOT . identifier LPAREN arglist RPAREN
    (16) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 94

state 72

    (48) bindinglist -> binding .
    (49) bindinglist -> binding . COMMA bindinglist

    IN              reduce using rule 48 (bindinglist -> binding .)
    COMMA           shift and go to state 95


state 73

    (47) expr -> LET bindinglist . IN expr

    IN              shift and go to state 96


state 74

    (50) binding -> identifier . COLON type
    (51) binding -> identifier . COLON type LARROW expr

    COLON           shift and go to state 97


state 75

    (40) expr -> NOT expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 40 (expr -> NOT expr .)
    FI              reduce using rule 40 (expr -> NOT expr .)
    RPAREN          reduce using rule 40 (expr -> NOT expr .)
    SEMI            reduce using rule 40 (expr -> NOT expr .)
    LOOP            reduce using rule 40 (expr -> NOT expr .)
    THEN            reduce using rule 40 (expr -> NOT expr .)
    COMMA           reduce using rule 40 (expr -> NOT expr .)
    RBRACE          reduce using rule 40 (expr -> NOT expr .)
    POOL            reduce using rule 40 (expr -> NOT expr .)
    ELSE            reduce using rule 40 (expr -> NOT expr .)
    IN              reduce using rule 40 (expr -> NOT expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64

  ! DOT             [ reduce using rule 40 (expr -> NOT expr .) ]
  ! AT              [ reduce using rule 40 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 40 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> NOT expr .) ]
  ! LT              [ reduce using rule 40 (expr -> NOT expr .) ]
  ! LE              [ reduce using rule 40 (expr -> NOT expr .) ]
  ! EQUALS          [ reduce using rule 40 (expr -> NOT expr .) ]


state 76

    (17) expr -> identifier LARROW . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 98
    identifier                     shift and go to state 49

state 77

    (20) expr -> identifier LPAREN . arglist RPAREN
    (25) arglist -> . expr B
    (26) arglist -> .
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    RPAREN          reduce using rule 26 (arglist -> .)
    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 100
    arglist                        shift and go to state 99
    identifier                     shift and go to state 49

state 78

    (11) feature -> identifier LPAREN RPAREN COLON type LBRACE . expr RBRACE
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 49
    expr                           shift and go to state 101

state 79

    (10) feature -> identifier LPAREN formallist RPAREN COLON type . LBRACE expr RBRACE

    LBRACE          shift and go to state 102


state 80

    (28) expr -> WHILE expr LOOP . expr POOL
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 103
    identifier                     shift and go to state 49

state 81

    (52) expr -> CASE expr OF . caselist ESAC
    (53) caselist -> . case SEMI
    (54) caselist -> . case SEMI caselist
    (55) case -> . identifier COLON type RARROW expr
    (16) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    case                           shift and go to state 104
    identifier                     shift and go to state 106
    caselist                       shift and go to state 105

state 82

    (41) expr -> LPAREN expr RPAREN .

    OF              reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    AT              reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    FI              reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    LOOP            reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    THEN            reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    POOL            reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 41 (expr -> LPAREN expr RPAREN .)
    IN              reduce using rule 41 (expr -> LPAREN expr RPAREN .)


state 83

    (27) expr -> IF expr THEN . expr ELSE expr FI
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 107
    identifier                     shift and go to state 49

state 84

    (29) expr -> LBRACE exprlist RBRACE .

    OF              reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    DOT             reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    AT              reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    PLUS            reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    MINUS           reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    TIMES           reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    DIVIDE          reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    LT              reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    LE              reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    EQUALS          reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    FI              reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    RPAREN          reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    SEMI            reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    LOOP            reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    THEN            reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    COMMA           reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    RBRACE          reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    POOL            reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    ELSE            reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)
    IN              reduce using rule 29 (expr -> LBRACE exprlist RBRACE .)


state 85

    (21) exprlist -> expr SEMI .
    (22) exprlist -> expr SEMI . exprlist
    (21) exprlist -> . expr SEMI
    (22) exprlist -> . expr SEMI exprlist
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    RBRACE          reduce using rule 21 (exprlist -> expr SEMI .)
    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 62
    identifier                     shift and go to state 49
    exprlist                       shift and go to state 108

state 86

    (35) expr -> expr DIVIDE expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 35 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 35 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 35 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 35 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 35 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 35 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 35 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 35 (expr -> expr DIVIDE expr .)
    FI              reduce using rule 35 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 35 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 35 (expr -> expr DIVIDE expr .)
    LOOP            reduce using rule 35 (expr -> expr DIVIDE expr .)
    THEN            reduce using rule 35 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 35 (expr -> expr DIVIDE expr .)
    RBRACE          reduce using rule 35 (expr -> expr DIVIDE expr .)
    POOL            reduce using rule 35 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 35 (expr -> expr DIVIDE expr .)
    IN              reduce using rule 35 (expr -> expr DIVIDE expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68

  ! DOT             [ reduce using rule 35 (expr -> expr DIVIDE expr .) ]
  ! AT              [ reduce using rule 35 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! TIMES           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! EQUALS          [ shift and go to state 64 ]


state 87

    (39) expr -> expr EQUALS expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 39 (expr -> expr EQUALS expr .)
    LT              reduce using rule 39 (expr -> expr EQUALS expr .)
    LE              reduce using rule 39 (expr -> expr EQUALS expr .)
    EQUALS          reduce using rule 39 (expr -> expr EQUALS expr .)
    FI              reduce using rule 39 (expr -> expr EQUALS expr .)
    RPAREN          reduce using rule 39 (expr -> expr EQUALS expr .)
    SEMI            reduce using rule 39 (expr -> expr EQUALS expr .)
    LOOP            reduce using rule 39 (expr -> expr EQUALS expr .)
    THEN            reduce using rule 39 (expr -> expr EQUALS expr .)
    COMMA           reduce using rule 39 (expr -> expr EQUALS expr .)
    RBRACE          reduce using rule 39 (expr -> expr EQUALS expr .)
    POOL            reduce using rule 39 (expr -> expr EQUALS expr .)
    ELSE            reduce using rule 39 (expr -> expr EQUALS expr .)
    IN              reduce using rule 39 (expr -> expr EQUALS expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63

  ! DOT             [ reduce using rule 39 (expr -> expr EQUALS expr .) ]
  ! AT              [ reduce using rule 39 (expr -> expr EQUALS expr .) ]
  ! PLUS            [ reduce using rule 39 (expr -> expr EQUALS expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr EQUALS expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> expr EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> expr EQUALS expr .) ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! EQUALS          [ shift and go to state 64 ]


state 88

    (34) expr -> expr TIMES expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 34 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 34 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 34 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 34 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 34 (expr -> expr TIMES expr .)
    LT              reduce using rule 34 (expr -> expr TIMES expr .)
    LE              reduce using rule 34 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 34 (expr -> expr TIMES expr .)
    FI              reduce using rule 34 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 34 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 34 (expr -> expr TIMES expr .)
    LOOP            reduce using rule 34 (expr -> expr TIMES expr .)
    THEN            reduce using rule 34 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 34 (expr -> expr TIMES expr .)
    RBRACE          reduce using rule 34 (expr -> expr TIMES expr .)
    POOL            reduce using rule 34 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 34 (expr -> expr TIMES expr .)
    IN              reduce using rule 34 (expr -> expr TIMES expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68

  ! DOT             [ reduce using rule 34 (expr -> expr TIMES expr .) ]
  ! AT              [ reduce using rule 34 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! TIMES           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! EQUALS          [ shift and go to state 64 ]


state 89

    (37) expr -> expr LT expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 37 (expr -> expr LT expr .)
    LT              reduce using rule 37 (expr -> expr LT expr .)
    LE              reduce using rule 37 (expr -> expr LT expr .)
    EQUALS          reduce using rule 37 (expr -> expr LT expr .)
    FI              reduce using rule 37 (expr -> expr LT expr .)
    RPAREN          reduce using rule 37 (expr -> expr LT expr .)
    SEMI            reduce using rule 37 (expr -> expr LT expr .)
    LOOP            reduce using rule 37 (expr -> expr LT expr .)
    THEN            reduce using rule 37 (expr -> expr LT expr .)
    COMMA           reduce using rule 37 (expr -> expr LT expr .)
    RBRACE          reduce using rule 37 (expr -> expr LT expr .)
    POOL            reduce using rule 37 (expr -> expr LT expr .)
    ELSE            reduce using rule 37 (expr -> expr LT expr .)
    IN              reduce using rule 37 (expr -> expr LT expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63

  ! DOT             [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! AT              [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! EQUALS          [ shift and go to state 64 ]


state 90

    (38) expr -> expr LE expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 38 (expr -> expr LE expr .)
    LT              reduce using rule 38 (expr -> expr LE expr .)
    LE              reduce using rule 38 (expr -> expr LE expr .)
    EQUALS          reduce using rule 38 (expr -> expr LE expr .)
    FI              reduce using rule 38 (expr -> expr LE expr .)
    RPAREN          reduce using rule 38 (expr -> expr LE expr .)
    SEMI            reduce using rule 38 (expr -> expr LE expr .)
    LOOP            reduce using rule 38 (expr -> expr LE expr .)
    THEN            reduce using rule 38 (expr -> expr LE expr .)
    COMMA           reduce using rule 38 (expr -> expr LE expr .)
    RBRACE          reduce using rule 38 (expr -> expr LE expr .)
    POOL            reduce using rule 38 (expr -> expr LE expr .)
    ELSE            reduce using rule 38 (expr -> expr LE expr .)
    IN              reduce using rule 38 (expr -> expr LE expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63

  ! DOT             [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! AT              [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! EQUALS          [ shift and go to state 64 ]


state 91

    (19) expr -> expr AT type . DOT identifier LPAREN arglist RPAREN

    DOT             shift and go to state 109


state 92

    (32) expr -> expr PLUS expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 32 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 32 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 32 (expr -> expr PLUS expr .)
    LT              reduce using rule 32 (expr -> expr PLUS expr .)
    LE              reduce using rule 32 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 32 (expr -> expr PLUS expr .)
    FI              reduce using rule 32 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 32 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 32 (expr -> expr PLUS expr .)
    LOOP            reduce using rule 32 (expr -> expr PLUS expr .)
    THEN            reduce using rule 32 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 32 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 32 (expr -> expr PLUS expr .)
    POOL            reduce using rule 32 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 32 (expr -> expr PLUS expr .)
    IN              reduce using rule 32 (expr -> expr PLUS expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63

  ! DOT             [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! AT              [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! EQUALS          [ shift and go to state 64 ]


state 93

    (33) expr -> expr MINUS expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 33 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 33 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 33 (expr -> expr MINUS expr .)
    LT              reduce using rule 33 (expr -> expr MINUS expr .)
    LE              reduce using rule 33 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 33 (expr -> expr MINUS expr .)
    FI              reduce using rule 33 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 33 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 33 (expr -> expr MINUS expr .)
    LOOP            reduce using rule 33 (expr -> expr MINUS expr .)
    THEN            reduce using rule 33 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 33 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 33 (expr -> expr MINUS expr .)
    POOL            reduce using rule 33 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 33 (expr -> expr MINUS expr .)
    IN              reduce using rule 33 (expr -> expr MINUS expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63

  ! DOT             [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! AT              [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! LT              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! EQUALS          [ shift and go to state 64 ]


state 94

    (18) expr -> expr DOT identifier . LPAREN arglist RPAREN

    LPAREN          shift and go to state 110


state 95

    (49) bindinglist -> binding COMMA . bindinglist
    (48) bindinglist -> . binding
    (49) bindinglist -> . binding COMMA bindinglist
    (50) binding -> . identifier COLON type
    (51) binding -> . identifier COLON type LARROW expr
    (16) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    bindinglist                    shift and go to state 111
    identifier                     shift and go to state 74
    binding                        shift and go to state 72

state 96

    (47) expr -> LET bindinglist IN . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 49
    expr                           shift and go to state 112

state 97

    (50) binding -> identifier COLON . type
    (51) binding -> identifier COLON . type LARROW expr
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 113

state 98

    (17) expr -> identifier LARROW expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    OF              reduce using rule 17 (expr -> identifier LARROW expr .)
    FI              reduce using rule 17 (expr -> identifier LARROW expr .)
    RPAREN          reduce using rule 17 (expr -> identifier LARROW expr .)
    SEMI            reduce using rule 17 (expr -> identifier LARROW expr .)
    LOOP            reduce using rule 17 (expr -> identifier LARROW expr .)
    THEN            reduce using rule 17 (expr -> identifier LARROW expr .)
    COMMA           reduce using rule 17 (expr -> identifier LARROW expr .)
    RBRACE          reduce using rule 17 (expr -> identifier LARROW expr .)
    POOL            reduce using rule 17 (expr -> identifier LARROW expr .)
    ELSE            reduce using rule 17 (expr -> identifier LARROW expr .)
    IN              reduce using rule 17 (expr -> identifier LARROW expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64

  ! DOT             [ reduce using rule 17 (expr -> identifier LARROW expr .) ]
  ! AT              [ reduce using rule 17 (expr -> identifier LARROW expr .) ]
  ! PLUS            [ reduce using rule 17 (expr -> identifier LARROW expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> identifier LARROW expr .) ]
  ! TIMES           [ reduce using rule 17 (expr -> identifier LARROW expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> identifier LARROW expr .) ]
  ! LT              [ reduce using rule 17 (expr -> identifier LARROW expr .) ]
  ! LE              [ reduce using rule 17 (expr -> identifier LARROW expr .) ]
  ! EQUALS          [ reduce using rule 17 (expr -> identifier LARROW expr .) ]


state 99

    (20) expr -> identifier LPAREN arglist . RPAREN

    RPAREN          shift and go to state 114


state 100

    (25) arglist -> expr . B
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr
    (23) B -> . COMMA expr B
    (24) B -> .

    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64
    COMMA           shift and go to state 116
    RPAREN          reduce using rule 24 (B -> .)

    B                              shift and go to state 115

state 101

    (11) feature -> identifier LPAREN RPAREN COLON type LBRACE expr . RBRACE
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    RBRACE          shift and go to state 117
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 102

    (10) feature -> identifier LPAREN formallist RPAREN COLON type LBRACE . expr RBRACE
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 49
    expr                           shift and go to state 118

state 103

    (28) expr -> WHILE expr LOOP expr . POOL
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    POOL            shift and go to state 119
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 104

    (53) caselist -> case . SEMI
    (54) caselist -> case . SEMI caselist

    SEMI            shift and go to state 120


state 105

    (52) expr -> CASE expr OF caselist . ESAC

    ESAC            shift and go to state 121


state 106

    (55) case -> identifier . COLON type RARROW expr

    COLON           shift and go to state 122


state 107

    (27) expr -> IF expr THEN expr . ELSE expr FI
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    ELSE            shift and go to state 123
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 108

    (22) exprlist -> expr SEMI exprlist .

    RBRACE          reduce using rule 22 (exprlist -> expr SEMI exprlist .)


state 109

    (19) expr -> expr AT type DOT . identifier LPAREN arglist RPAREN
    (16) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 124

state 110

    (18) expr -> expr DOT identifier LPAREN . arglist RPAREN
    (25) arglist -> . expr B
    (26) arglist -> .
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    RPAREN          reduce using rule 26 (arglist -> .)
    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 100
    arglist                        shift and go to state 125
    identifier                     shift and go to state 49

state 111

    (49) bindinglist -> binding COMMA bindinglist .

    IN              reduce using rule 49 (bindinglist -> binding COMMA bindinglist .)


state 112

    (47) expr -> LET bindinglist IN expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
    OF              reduce using rule 47 (expr -> LET bindinglist IN expr .)
    FI              reduce using rule 47 (expr -> LET bindinglist IN expr .)
    RPAREN          reduce using rule 47 (expr -> LET bindinglist IN expr .)
    SEMI            reduce using rule 47 (expr -> LET bindinglist IN expr .)
    LOOP            reduce using rule 47 (expr -> LET bindinglist IN expr .)
    THEN            reduce using rule 47 (expr -> LET bindinglist IN expr .)
    COMMA           reduce using rule 47 (expr -> LET bindinglist IN expr .)
    RBRACE          reduce using rule 47 (expr -> LET bindinglist IN expr .)
    POOL            reduce using rule 47 (expr -> LET bindinglist IN expr .)
    ELSE            reduce using rule 47 (expr -> LET bindinglist IN expr .)
    IN              reduce using rule 47 (expr -> LET bindinglist IN expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64

  ! DOT             [ reduce using rule 47 (expr -> LET bindinglist IN expr .) ]
  ! AT              [ reduce using rule 47 (expr -> LET bindinglist IN expr .) ]
  ! PLUS            [ reduce using rule 47 (expr -> LET bindinglist IN expr .) ]
  ! MINUS           [ reduce using rule 47 (expr -> LET bindinglist IN expr .) ]
  ! TIMES           [ reduce using rule 47 (expr -> LET bindinglist IN expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> LET bindinglist IN expr .) ]
  ! LT              [ reduce using rule 47 (expr -> LET bindinglist IN expr .) ]
  ! LE              [ reduce using rule 47 (expr -> LET bindinglist IN expr .) ]
  ! EQUALS          [ reduce using rule 47 (expr -> LET bindinglist IN expr .) ]


state 113

    (50) binding -> identifier COLON type .
    (51) binding -> identifier COLON type . LARROW expr

    COMMA           reduce using rule 50 (binding -> identifier COLON type .)
    IN              reduce using rule 50 (binding -> identifier COLON type .)
    LARROW          shift and go to state 126


state 114

    (20) expr -> identifier LPAREN arglist RPAREN .

    OF              reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    DOT             reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    AT              reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    PLUS            reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    MINUS           reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    TIMES           reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    DIVIDE          reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    LT              reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    LE              reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    EQUALS          reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    FI              reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    SEMI            reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    LOOP            reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    THEN            reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    COMMA           reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    POOL            reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    ELSE            reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)
    IN              reduce using rule 20 (expr -> identifier LPAREN arglist RPAREN .)


state 115

    (25) arglist -> expr B .

    RPAREN          reduce using rule 25 (arglist -> expr B .)


state 116

    (23) B -> COMMA . expr B
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 49
    expr                           shift and go to state 127

state 117

    (11) feature -> identifier LPAREN RPAREN COLON type LBRACE expr RBRACE .

    SEMI            reduce using rule 11 (feature -> identifier LPAREN RPAREN COLON type LBRACE expr RBRACE .)


state 118

    (10) feature -> identifier LPAREN formallist RPAREN COLON type LBRACE expr . RBRACE
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    RBRACE          shift and go to state 128
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 119

    (28) expr -> WHILE expr LOOP expr POOL .

    OF              reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    DOT             reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    AT              reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    PLUS            reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    MINUS           reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    TIMES           reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    DIVIDE          reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    LT              reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    EQUALS          reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    RPAREN          reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    SEMI            reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    COMMA           reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    RBRACE          reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)
    IN              reduce using rule 28 (expr -> WHILE expr LOOP expr POOL .)


state 120

    (53) caselist -> case SEMI .
    (54) caselist -> case SEMI . caselist
    (53) caselist -> . case SEMI
    (54) caselist -> . case SEMI caselist
    (55) case -> . identifier COLON type RARROW expr
    (16) identifier -> . IDENTIFIER

    ESAC            reduce using rule 53 (caselist -> case SEMI .)
    IDENTIFIER      shift and go to state 14

    case                           shift and go to state 104
    identifier                     shift and go to state 106
    caselist                       shift and go to state 129

state 121

    (52) expr -> CASE expr OF caselist ESAC .

    OF              reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    DOT             reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    AT              reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    PLUS            reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    MINUS           reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    TIMES           reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    DIVIDE          reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    LT              reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    LE              reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    EQUALS          reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    FI              reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    RPAREN          reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    SEMI            reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    LOOP            reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    THEN            reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    COMMA           reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    RBRACE          reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    POOL            reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    ELSE            reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)
    IN              reduce using rule 52 (expr -> CASE expr OF caselist ESAC .)


state 122

    (55) case -> identifier COLON . type RARROW expr
    (15) type -> . TYPE

    TYPE            shift and go to state 5

    type                           shift and go to state 130

state 123

    (27) expr -> IF expr THEN expr ELSE . expr FI
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    expr                           shift and go to state 131
    identifier                     shift and go to state 49

state 124

    (19) expr -> expr AT type DOT identifier . LPAREN arglist RPAREN

    LPAREN          shift and go to state 132


state 125

    (18) expr -> expr DOT identifier LPAREN arglist . RPAREN

    RPAREN          shift and go to state 133


state 126

    (51) binding -> identifier COLON type LARROW . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 49
    expr                           shift and go to state 134

state 127

    (23) B -> COMMA expr . B
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr
    (23) B -> . COMMA expr B
    (24) B -> .

    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64
    COMMA           shift and go to state 116
    RPAREN          reduce using rule 24 (B -> .)

    B                              shift and go to state 135

state 128

    (10) feature -> identifier LPAREN formallist RPAREN COLON type LBRACE expr RBRACE .

    SEMI            reduce using rule 10 (feature -> identifier LPAREN formallist RPAREN COLON type LBRACE expr RBRACE .)


state 129

    (54) caselist -> case SEMI caselist .

    ESAC            reduce using rule 54 (caselist -> case SEMI caselist .)


state 130

    (55) case -> identifier COLON type . RARROW expr

    RARROW          shift and go to state 136


state 131

    (27) expr -> IF expr THEN expr ELSE expr . FI
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    FI              shift and go to state 137
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 132

    (19) expr -> expr AT type DOT identifier LPAREN . arglist RPAREN
    (25) arglist -> . expr B
    (26) arglist -> .
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    RPAREN          reduce using rule 26 (arglist -> .)
    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 49
    expr                           shift and go to state 100
    arglist                        shift and go to state 138

state 133

    (18) expr -> expr DOT identifier LPAREN arglist RPAREN .

    OF              reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    DOT             reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    AT              reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    PLUS            reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    MINUS           reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    TIMES           reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    DIVIDE          reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    LT              reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    LE              reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    EQUALS          reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    FI              reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    SEMI            reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    LOOP            reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    THEN            reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    COMMA           reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    POOL            reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    ELSE            reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)
    IN              reduce using rule 18 (expr -> expr DOT identifier LPAREN arglist RPAREN .)


state 134

    (51) binding -> identifier COLON type LARROW expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    COMMA           reduce using rule 51 (binding -> identifier COLON type LARROW expr .)
    IN              reduce using rule 51 (binding -> identifier COLON type LARROW expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 135

    (23) B -> COMMA expr B .

    RPAREN          reduce using rule 23 (B -> COMMA expr B .)


state 136

    (55) case -> identifier COLON type RARROW . expr
    (17) expr -> . identifier LARROW expr
    (18) expr -> . expr DOT identifier LPAREN arglist RPAREN
    (19) expr -> . expr AT type DOT identifier LPAREN arglist RPAREN
    (20) expr -> . identifier LPAREN arglist RPAREN
    (27) expr -> . IF expr THEN expr ELSE expr FI
    (28) expr -> . WHILE expr LOOP expr POOL
    (29) expr -> . LBRACE exprlist RBRACE
    (30) expr -> . NEW type
    (31) expr -> . ISVOID expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . TILDE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr EQUALS expr
    (40) expr -> . NOT expr
    (41) expr -> . LPAREN expr RPAREN
    (42) expr -> . identifier
    (43) expr -> . INTEGER
    (44) expr -> . STRING
    (45) expr -> . TRUE
    (46) expr -> . FALSE
    (47) expr -> . LET bindinglist IN expr
    (52) expr -> . CASE expr OF caselist ESAC
    (16) identifier -> . IDENTIFIER

    IF              shift and go to state 43
    WHILE           shift and go to state 34
    LBRACE          shift and go to state 44
    NEW             shift and go to state 35
    ISVOID          shift and go to state 38
    TILDE           shift and go to state 39
    NOT             shift and go to state 48
    LPAREN          shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 45
    LET             shift and go to state 47
    CASE            shift and go to state 37
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 49
    expr                           shift and go to state 139

state 137

    (27) expr -> IF expr THEN expr ELSE expr FI .

    OF              reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    DOT             reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    AT              reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    PLUS            reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    MINUS           reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    TIMES           reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    DIVIDE          reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    LT              reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    EQUALS          reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    RPAREN          reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    SEMI            reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    COMMA           reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    RBRACE          reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)
    IN              reduce using rule 27 (expr -> IF expr THEN expr ELSE expr FI .)


state 138

    (19) expr -> expr AT type DOT identifier LPAREN arglist . RPAREN

    RPAREN          shift and go to state 140


state 139

    (55) case -> identifier COLON type RARROW expr .
    (18) expr -> expr . DOT identifier LPAREN arglist RPAREN
    (19) expr -> expr . AT type DOT identifier LPAREN arglist RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . EQUALS expr

    SEMI            reduce using rule 55 (case -> identifier COLON type RARROW expr .)
    DOT             shift and go to state 71
    AT              shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 63
    LT              shift and go to state 66
    LE              shift and go to state 67
    EQUALS          shift and go to state 64


state 140

    (19) expr -> expr AT type DOT identifier LPAREN arglist RPAREN .

    OF              reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    DOT             reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    AT              reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    PLUS            reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    MINUS           reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    TIMES           reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    DIVIDE          reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    LT              reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    LE              reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    EQUALS          reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    FI              reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    SEMI            reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    LOOP            reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    THEN            reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    COMMA           reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    POOL            reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    ELSE            reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)
    IN              reduce using rule 19 (expr -> expr AT type DOT identifier LPAREN arglist RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 112 resolved as shift
WARNING: shift/reduce conflict for AT in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for LT in state 112 resolved as shift
WARNING: shift/reduce conflict for LE in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 112 resolved as shift
